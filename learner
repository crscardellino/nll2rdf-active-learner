#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use Getopt::Long;
use Statistics::Descriptive;

sub print_help {
  print STDERR "usage:\n";
  print STDERR "./learner -t <TAGGED_DIR> -u <UNTAGGED_DIR> -o <OUTPUT_DIR> ";
  print STDERR "[-q <NUMBER_OF_QUERIES>] [-f <FILTER_TAGGED_CORPUS>] [-g <FILTER_UNTAGGED_CORPUS>] [--passive]\n";
  print STDERR "\tTAGGED_DIR\t\tDirectory with the annotated files in conll format\n";
  print STDERR "\tUNTAGGED_DIR\t\tDirectory with the unannotated files in conll format\n";
  print STDERR "\tOUTPUT_DIR\t\tDirectory where results are written\n";
  print STDERR "\tNUMBER_OF_QUERIES\tAmount of queries in each step of the Active Learning algorithm (defaults to 5)\n";
  print STDERR "\tFILTER_TAGGED_CORPUS\tFilter of features for annotated corpus (default to 0)\n";
  print STDERR "\tFILTER_UNTAGGED_CORPUS\tFilter of features for unannotated corpus (default to 10)\n";
  print STDERR "\tpassive\t\t\tIf flagged, the sampling of the unannotated corpus is random (doesn't use active learning approach)\n";
}

sub print_results {
  my $iteration = shift;
  my $dir = shift;

  my @data = `find $dir -name "data.*.txt" -print0 | xargs -0 -I {} sh -c 'printf {}; printf " "; cat {}'`;
  die "$!" if ($? >> 8) != 0;
  chomp @data;

  my @kappas = ();
  my @precisions = ();
  my @recalls = ();
  my @fmeasures = ();

  print STDERR "\nResults for iteration $iteration\n";
  print STDERR "KAPPA\tPREC\tRECALL\tF-SCORE\tCLASS\n";

  foreach my $data(@data) {
    my @coeffs = split /\s/, $data;
    my ($volume, $directory, $filename) = File::Spec->splitpath(shift @coeffs);
    
    my $name = (split /\./, $filename)[1];

    print STDERR $coeffs[0] . "\t" . $coeffs[1] . "\t" . $coeffs[2] . "\t" . $coeffs[3] . "\t";
    print STDERR uc($name) . "\n";
    push @kappas, $coeffs[0];
    push @precisions, $coeffs[1];
    push @recalls, $coeffs[2];
    push @fmeasures, $coeffs[3];
  }

  my @stats = ();
  
  my $stat = Statistics::Descriptive::Full->new();
  $stat->add_data(@kappas);
  push @stats, $stat;

  $stat = Statistics::Descriptive::Full->new();
  $stat->add_data(@precisions);
  push @stats, $stat;

  $stat = Statistics::Descriptive::Full->new();
  $stat->add_data(@recalls);
  push @stats, $stat;

  $stat = Statistics::Descriptive::Full->new();
  $stat->add_data(@fmeasures);
  push @stats, $stat;

  print STDERR "\nGeneral Results Stastistics\n";
  print STDERR "KAPPA\tPREC\tRECALL\tF-SCORE\tCLASS\n";

  print STDERR sprintf("%.2f\t", $stats[0]->median());
  print STDERR sprintf("%.2f\t", $stats[1]->median());
  print STDERR sprintf("%.2f\t", $stats[2]->median());
  print STDERR sprintf("%.2f\t", $stats[3]->median());
  print STDERR "MEDIAN\n";

  print STDERR sprintf("%.2f\t", $stats[0]->mean());
  print STDERR sprintf("%.2f\t", $stats[1]->mean());
  print STDERR sprintf("%.2f\t", $stats[2]->mean());
  print STDERR sprintf("%.2f\t", $stats[3]->mean());
  print STDERR "MEAN\n";
  
  print STDERR sprintf("%.2f\t", $stats[0]->standard_deviation());
  print STDERR sprintf("%.2f\t", $stats[1]->standard_deviation());
  print STDERR sprintf("%.2f\t", $stats[2]->standard_deviation());
  print STDERR sprintf("%.2f\t", $stats[3]->standard_deviation());
  print STDERR "SDEV\n";  
}

my $tagdir = undef;
my $untagdir = undef;
my $outputdir = undef;
my $query_instances = 5;
my $tagfilter = 0;
my $untagfilter = 10;
my $passive = '';

GetOptions("t=s" => \$tagdir,
           "u=s" => \$untagdir,
           "o=s" => \$outputdir,
           "q=i" => \$query_instances,
           "f=i" => \$tagfilter,
           "uf=i" => \$untagfilter,
           "passive" => \$passive);

if(!defined $tagdir or !defined $untagdir or !defined $outputdir) {
  print_help;
  die "Error in parsing the arguments.";
} 

mkdir "$outputdir/iteration0";
mkdir "$outputdir/iteration0/data";
mkdir "$outputdir/iteration0/data/binary";
mkdir "$outputdir/iteration0/models";
mkdir "$outputdir/iteration0/results";

my $rc = system "perl ./utils/annotated/generateannotatedfile.pl $tagdir $outputdir/iteration0 $tagfilter";
die if ($rc >> 8) != 0;

Annotated corpus initial training

my $java = "java -Xmx2048m -cp bin/nll2rdf.jar nll2rdf.classifiers.AnnotatedClassifier";
my $args = "-a $outputdir/iteration0/data/binary/ -o $outputdir/iteration0/";

$rc = system $java . " " . $args;
die "Error in the training of the initial model: $!" if ($rc >> 8) != 0;

print_results 0, "$outputdir/iteration0/results";

print "\n";

my $iteration = 1;

while(1) {
  print STDERR "Active learning iteration: $iteration\n";

  mkdir "$outputdir/iteration$iteration";
  mkdir "$outputdir/iteration$iteration/data";
  mkdir "$outputdir/iteration$iteration/data/binary";
  mkdir "$outputdir/iteration$iteration/instances";
  mkdir "$outputdir/iteration$iteration/models";
  mkdir "$outputdir/iteration$iteration/results";

  my $features = sprintf("$outputdir/iteration%d/models", $iteration - 1);
  my $oldarff = sprintf("$outputdir/iteration%d/data/annotated.nll2rdf.arff", $iteration - 1);
  my $outdir = "$outputdir/iteration$iteration";

  $rc = system "perl ./utils/unannotated/generateunannotatedfile.pl $untagdir $features $oldarff $outdir $untagfilter";
  die if ($rc >> 8) != 0;

  print_results 0, "$outdir/results";
  <STDIN>;
  $iteration++;
}